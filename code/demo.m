function demo

% Based on Makarchuk2016ECoGSignals/code
addpath(fullfile(pwd,'..', '..', '..', 'Group374', 'Makarchuk2016ECoGSignals', 'code'));
addpath(fullfile(pwd, '..', '..', '..', '..', 'MATLAB', 'tensor_toolbox_2.6'));
addpath(fullfile(pwd, 'utils'));
%--------------------------------------------------------------------------
% Read data:
% time points of interest:
TIME_STEP = 0.05;
time_points = 5:TIME_STEP:950;
step_str = strrep(num2str(TIME_STEP), '.', 'p');

MARKER = 'lwr';
FRSCALE = 5; 
N_BEST_TD = 15;
N_BEST_FD = 50;
FEATURES = '2D'; % '2D'
TNS_SIMILARITY = 'Tucker'; % could be 'Tucker' or 'unfold' for tns, 
MAT_SIMILARITY = 'correl'; % for matrices
dims = {'x', 'y', 'z'};
DIM = 1:3;
TNS_FLAG = 1;

if TNS_FLAG
    folder = 'tns_mfe/';
    similarity = TNS_SIMILARITY;
else
    folder = 'manual_feat_extraction/';
    similarity = MAT_SIMILARITY;
end

experiment_name = '20090121S1_FTT_A_ZenasChao_csv_ECoG32-Motion10';
date1 = experiment_name(1:10);


if strcmpi(FEATURES, '2D')
    % % file with parameters for 2D feature extraction:
    % % params_name = 'saved data/td_fd_feature_extraction_params_A_0p05_lwrz.mat';
    % % load(params_name);
    % set parameters for 2D feature extraction:
    params.tdelay = [13, 1]; % [td_idx, mdl]. td_idx >= mdl indicates positive delay
    params.td_step = 0.05;
    params.frequency_bands = [0.5, 3.5, 0.5; 4, 8, 0.5; ...
                                9, 18, 3; 20, 45, 5; ...
                                50, 100, 10; ];
    assert(TIME_STEP == params.td_step);
    delay = (params.tdelay(1) + 1 - params.tdelay(2))*TIME_STEP;
    params.msdelay = delay;
    featstr = [FEATURES, '_', strrep(num2str(delay), '.', 'p')];
    featstr = strrep(featstr, '-', 'min');
else
    % set parameters for 3D feature extraction:
    params.time_interval = 1.0;
    params.time_edge = 0.1;  % in seconds
    params.ntimebins = 20;
    params.ds_rate = 1;  % no downsampling
    params.alpha = 'none'; % no artifacts removal
    params.frequency_bands = [0.5, 3.5, 0.5; 4, 8, 0.5; ...
                                9, 18, 3; 25, 50, 5; ...
                                100, 500, 100; ];
    featstr = FEATURES;
end
params.features = FEATURES;

fprintf('Reading features (%s) for subject %s \n', FEATURES, experiment_name);
tic
if strcmpi(FEATURES, '2D')
% % [features1, motion_dim1, params] = extract_max_corr_features(...
% %                                             experiment_name, time_points,...
% %                                             MARKER, N_BEST_TD, N_BEST_FD, ...
% %                                             DIM, []);
% % save(params_name, 'params');
% 
% % [features1, motion_dim1, params] = extract_max_corr_features(...
% %                                             experiment_name, time_points,...
% %                                             [], [], [], [], params);
fprintf('Extracting delayed featues with time delay = %0.2f s \n', delay);
[features1, motion_dim1, params] = extract_all_features(...
                                            experiment_name, time_points,...
                                            FRSCALE, MARKER, ...
                                            DIM, params, TNS_FLAG);
else
[features1, motion_dim1, params] = extract_all_features_3D(...
                                            experiment_name, time_points,...
                                            MARKER, DIM, ...
                                            params, TNS_FLAG);
end
toc

% new features for the same monkey:
fprintf('Reading features for subject %s \n', experiment_name);
tic
experiment_name = '20090611S1_FTT_A_ZenasChao_csv_ECoG32-Motion12';
date2 = experiment_name(1:10);
% % [features2, motion_dim2, ~] = extract_max_corr_features(...
% %                                             experiment_name, time_points,...
% %                                             [], [], [], [], params);
if strcmpi(FEATURES, '2D')
[features2, motion_dim2, ~] = extract_all_features(...
                                            experiment_name, time_points,...
                                            FRSCALE, MARKER, ...
                                            DIM, params, TNS_FLAG);
else
[features2, motion_dim2, ~] = extract_all_features_3D(...
                                            experiment_name, time_points,...
                                            MARKER, DIM, ...
                                            params, TNS_FLAG);
end
%--------------------------------------------------------------------------
% Components for partial least squares for testing.
ncomp_to_try = [10:5:40, 50:25:200];
t_obs = 645; % ??
N_FOLDS = 10;
num_obs = sum(time_points <= t_obs);
% cvp = tspartition(num_obs, N_FOLDS); 

% Y_set = create_Y_set(file_prefix, time_points, motion_markers, file_out_Y);
X_train = features1(1:num_obs, :, :, :); Y_train = motion_dim1(1:num_obs, :);
X_hold_out = features1(num_obs + 1:end, :, :, :);
Y_hold_out = motion_dim1(num_obs + 1:end, :, :, :);
%--------------------------------------------------------------------------
% Estimate PLS regression quality through crossvalidation:
tic
matr_err = num2cell(zeros(N_FOLDS, length(ncomp_to_try)));
matr_rs_err = matr_err; matr_rp_err = matr_err;
tnsr_err = num2cell(zeros(N_FOLDS, length(ncomp_to_try)));
tnsr_rs_err = matr_err; tnsr_rp_err = matr_err;
for i = 1:length(ncomp_to_try)
    fprintf('Iteration = %d / %d (ncomp = %d) \n', ...
        i, length(ncomp_to_try), ncomp_to_try(i));
    
    
    matr_fun = @(x_train, y_train, x_test, y_test)pls_fun_crossval(ncomp_to_try(i),...
                                        x_train, y_train, x_test, y_test, ...
                                        {X_hold_out, features2}, ...
                                        {Y_hold_out, motion_dim2}, 0);
    matr_fun_rs = @(x_train, y_train, x_test, y_test)pls_fun_crossval(ncomp_to_try(i),...
                                        x_train, y_train, x_test, y_test, ...
                                        {X_hold_out, features2}, ...
                                        {Y_hold_out, motion_dim2}, 0, ...
                                        struct('type', 'sobol', 's', 3, 'lambda', 1.0));
    matr_fun_rp = @(x_train, y_train, x_test, y_test)pls_fun_crossval(ncomp_to_try(i),...
                                        x_train, y_train, x_test, y_test, ...
                                        X_hold_out, Y_hold_out, 0, ...
                                        struct('type', 'poly', 's', 1, ...
                                        'npoly',3, ...
                                        'lambda', 1.0));                                
    tnsr_fun = @(x_train, y_train, x_test, y_test)pls_fun_crossval(ncomp_to_try(i),...
                                        x_train, y_train, x_test, y_test, ...
                                        {X_hold_out, features2}, ...
                                        {Y_hold_out, motion_dim2}, 1);
    tnsr_fun_rs = @(x_train, y_train, x_test, y_test)pls_fun_crossval(ncomp_to_try(i),...
                                        x_train, y_train, x_test, y_test, ...
                                        {X_hold_out, features2}, ...
                                        {Y_hold_out, motion_dim2}, 1, ...
                                        struct('type', 'sobol', 's', 5, 'lambda', 1.0));                                
    tnsr_fun_rp = @(x_train, y_train, x_test, y_test)pls_fun_crossval(ncomp_to_try(i),...
                                        x_train, y_train, x_test, y_test, ...
                                        {X_hold_out, features2}, ...
                                        {Y_hold_out, motion_dim2}, 1, ...
                                        struct('type', 'poly', 's', 1, ...
                                        'npoly', 11, 'lambda', 1.0));  
%     err = crossval(fun, X_test, Y_test, 'partition', cvp);
    
%     tnsr_fun_rp = @(x_train, y_train, x_test, y_test)pls_fun_crossval(ncomp_to_try(i),...
%                                         x_train, y_train, x_test, y_test, ...
%                                         X_hold_out, Y_hold_out, 1, ...
%                                         struct('type', 'recursive', ...
%                                         'block_size', 500, ...
%                                         'forgetting_factor', 0.9));
    errors = crossval(tnsr_fun_rs, X_train, Y_train, 'kfold', N_FOLDS);
    tnsr_rs_err(:, i) = arrayfun(@(c) {c}, errors); 
    output_results({tnsr_rs_err}, {'t-rs'}, i);     
    errors = crossval(tnsr_fun_rp, X_train, Y_train, 'kfold', N_FOLDS);
    tnsr_rp_err(:, i) = arrayfun(@(c) {c}, errors);
    output_results({tnsr_rp_err}, {'t-rp'}, i);  
    errors = crossval(matr_fun_rp, X_train, Y_train, 'kfold', N_FOLDS);
    matr_rp_err(:, i) = arrayfun(@(c) {c}, errors);
    output_results({matr_rp_err}, {'m-rp'}, i);  
    errors = crossval(matr_fun_rs, X_train, Y_train, 'kfold', N_FOLDS);
    matr_rs_err(:, i) = arrayfun(@(c) {c}, errors);
    output_results({matr_rs_err}, {'m-rs'}, i);   
    
    errors = crossval(matr_fun, X_train, Y_train, 'kfold', N_FOLDS);
    matr_err(:, i) = arrayfun(@(c) {c}, errors); 
    output_results({matr_err}, {'m'}, i);  
    errors = crossval(tnsr_fun, X_train, Y_train, 'kfold', N_FOLDS);
    tnsr_err(:, i) = arrayfun(@(c) {c}, errors); 
    output_results({tnsr_err}, {'t'}, i);  
    
% output_results({tnsr_rs_err, tnsr_rp_err}, ...
%         {'rs', 'rp'}, i);     
%     output_results({matr_err, matr_rs_err, matr_rp_err, tnsr_err, tnsr_rs_err, tnsr_rp_err}, ...
%         {'matr', 'rs', 'rp', 'tnsr', 'rs', 'rp'}, i);
end
toc
%--------------------------------------------------------------------------
% generate figure names:    
if all(ismember(1:n_markers, motion_markers))
    marker_names = 'all';
else
    marker_names = arrayfun(@(x) num2str(x), motion_markers', 'UniformOutput', 0);
    marker_names = strjoin(marker_names, '_');
end


postfix = ['_', marker_names, '_', step_str, '_nfolds_', num2str(N_FOLDS),...
            '_', experiment_name];
% save(['error_matrices_mt_rsp', postfix,'.mat'], 'matr_err', 'matr_rs_err', 'matr_rp_err', ...
%                                  'tnsr_err', 'tnsr_rs_err', 'tnsr_rp_err');

% save(['rnpls_100_0p9_', postfix,'.mat'], 'tnsr_rp_err');
                             
% plot_results(postfix, matr_err, matr_rs_err, matr_rp_err, tnsr_err, ...
%                                                 tnsr_rs_err, tnsr_rp_err);

end



function plot_results(postfix, matr_err, matr_rs_err, matr_rp_err, tnsr_err, ...
    tnsr_rs_err, tnsr_rp_err)

% Plot CV results:
% read errors for plotting

[mse, crr, ~, ~, ~, ~, ~] = read_errors(matr_err);
[tmse, tcrr, ~, ~, ~, ~, ~] = read_errors(tnsr_err);
[rsmse, rscrr, ~, ~, ~, ~, ~] = read_errors(matr_rs_err);
[rpmse, rpcrr, ~, ~, ~, ~, ~] = read_errors(matr_rp_err);
[trsmse, trscrr, ~, ~, ~, ~, ~] = read_errors(tnsr_rs_err);
[trpmse, trpcrr, ~, ~, ~, ~, ~] = read_errors(tnsr_rp_err);

plot_cv_results_area2({mean(crr), mean(tcrr), mean(rscrr), mean(rpcrr), mean(trscrr), mean(trpcrr)}, ...
                      {std(crr), std(tcrr), std(rscrr), std(rpcrr), std(trscrr), std(trpcrr)}, ...
                       ncomp_to_try, 'Correlation coef', ...
                       {'M-None', 'T-None', 'M-Sobol', 'M-Poly', 'T-Sobol', 'T-Poly'}, ...
                       ['mtr_corrc_ncompps', postfix])
                   
plot_cv_results_area2({mean(mse), mean(tmse), mean(rsmse), mean(rpmse), mean(trsmse), mean(trpmse)}, ...
                      {std(mse), std(tmse), std(rsmse), std(rpmse), std(trsmse), std(trpmse)}, ...
                       ncomp_to_try, 'Scaled MSE', ...
                       {'M-None', 'T-None', 'M-Sobol', 'M-Poly', 'T-Sobol', 'T-Poly'}, ...
                       ['mtr_mse_ncompps', postfix])
                           
% plot_cv_results_area2(mean(rscrr), std(rscrr), mean(rpcrr), std(rpcrr), ...
%                                ncomp_to_try, 'Correlation coef', ...
%                                {'Sobol', 'Poly'}, ...
%                                ['rsp_mcorrc_ncompps', postfix])
% 
% plot_cv_results_area2(mean(trscrr), std(trscrr), mean(trpcrr), std(trpcrr), ...
%                                ncomp_to_try, 'Correlation coef', ...
%                                {'Sobol', 'Poly'}, ...
%                                ['rsp_tcorrc_ncompps', postfix])
% plot_cv_results_area2(mean(tmse_train), std(tmse_train), mean(mse_train), std(mse_train), ...
%                                ncomp_to_try, 'Scaled MSE', ...
%                                {'Tensor', 'Matrix'}, ...
%                                ['tmscmse_ncompps_train', postfix])
% plot_cv_results_area2(mean(tdtwd_train), std(tdtwd_train), mean(dtwd_train), std(dtwd_train), ...
%                                ncomp_to_try, 'DTW distance', ...
%                                {'Tensor', 'Matrix'}, ...
%                                ['tmdtw_ncompps_train', postfix])
% plot_cv_results_area2(mean(tcrr_train), std(tcrr_train), mean(crr_train), std(crr_train), ...
%                                ncomp_to_try, 'Correlation coef', ...
%                                {'Tensor', 'Matrix'}, ...
%                                ['tmcorrc_ncompps_train', postfix])
%                            
% plot_cv_results_area2(mean(tcrr_ho), std(tcrr_ho), mean(crr_ho), std(crr_ho), ...
%                                ncomp_to_try, 'Holdout corr. coef.', ...
%                                {'Tensor', 'Matrix'}, ...
%                                ['tmcorr_ho_ncompps', postfix])
% plot_cv_results_area2(mean(tmse), std(tmse), mean(mse), std(mse), ...
%                                ncomp_to_try, 'Scaled MSE', ...
%                                {'Tensor', 'Matrix'}, ...
%                                ['tmscmse_ncompps', postfix])
% plot_cv_results_area2(mean(tdtwd), std(tdtwd), mean(dtwd), std(dtwd), ...
%                                ncomp_to_try, 'DTW distance', ...
%                                {'Tensor', 'Matrix'}, ...
%                                ['tmdtw_ncompps', postfix])
% plot_cv_results_area2(mean(tcrr), std(tcrr), mean(crr), std(crr), ...
%                                ncomp_to_try, 'Correlation coef', ...
%                                {'Tensor', 'Matrix'}, ......
%                                ['tmcorrc_ncompps', postfix])
                           
% plot_cv_results_area2(mean(crr_ho), std(crr_ho), mean(crr_train), std(crr_train), ...
%                                ncomp_to_try, 'Holdout corr. coef.', ...
%                                {'Hold-out', 'CV train'}, ...
%                                ['mcorr_ho_ncompps', postfix])
% plot_cv_results_area2(mean(mse), std(mse), mean(mse_train), std(mse_train), ...
%                                ncomp_to_try, 'Scaled MSE', ...
%                                {'CV test', 'CV train'}, ...
%                                ['mscmse_ncompps', postfix])
% plot_cv_results_area2(mean(dtwd), std(dtwd), mean(dtwd_train), std(dtwd_train), ...
%                                ncomp_to_try, 'DTW distance', ...
%                                {'CV test', 'CV train'}, ...
%                                ['mdtw_ncompps', postfix])
% plot_cv_results_area2(mean(crr), std(crr), mean(crr_train), std(crr_train), ...
%                                ncomp_to_try, 'Correlation coef', ...
%                                {'CV test', 'CV train'}, ...
%                                ['mcorrc_ncompps', postfix])



end

function output_results(matrices, names, i)

msestr = ''; corstr = '';
for n = 1:numel(names)
    te = cell2mat(matrices{n}(:, i));
    mte = mean([te().mse]); ste = std([te().mse]);
    msestr = [msestr, sprintf('%s: %0.2f +- %0.3f; ', ...
                        names{n}, mte, ste)];
    mte = mean([te().crr]); ste = std([te().crr]);
    corstr = [corstr, sprintf('%s: %0.2f +- %0.3f; ', ...
        names{n}, mte, ste)];
end
fprintf('MSE: %s \n', msestr);
fprintf('corr: %s \n', corstr);

end
% plot_cv_results_area(mse_mean, mse_std, ncomp_to_try)
% plot_cv_results_area(dtwd_mean, dtwd_std, ncomp_to_try)
% plot_cv_results_area(crr_mean, crr_std, ncomp_to_try)
% 
% plot_cv_results_area(mse_mean_train, mse_std, ncomp_to_try)
% plot_cv_results_area(dtwd_mean_train, dtwd_std, ncomp_to_try)
% plot_cv_results_area(crr_mean_train, crr_std, ncomp_to_try)


% figure; hold on;
% fill([ncomp_to_try fliplr(ncomp_to_try)], [mse_mean - mse_std, ...
%       fliplr(mse_mean + mse_std)], [1.0 1.0 1.0]*0.75);
% plot(ncomp_to_try, mse_mean, 'k-', 'linewidth', 2);
% hold off;
% xlabel('Number of PLS components', 'FontSize', 20, 'FontName', 'Times', ...
%     'Interpreter','latex');
% ylabel('MSE', 'FontSize', 20, 'FontName', 'Times', ...
%     'Interpreter','latex');
% set(gca, 'FontSize', 15, 'FontName', 'Times');
% axis tight;

